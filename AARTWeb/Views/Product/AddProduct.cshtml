
@{
    ViewBag.Title = "Adhoc Reprot";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

<script src="~/GeneralJscripts/TelerikScripts/jquery.min.js"></script>
<script src="~/GeneralJscripts/TelerikScripts/jszip.min.js"></script>
<script src="~/GeneralJscripts/TelerikScripts/kendo.all.min.js"></script>

<link href="~/GeneralJscripts/TelerikCSS/kendo.common.min.css" rel="stylesheet">
<link href="~/GeneralJscripts/TelerikCSS/kendo.rtl.min.css" rel="stylesheet">
<link href="~/GeneralJscripts/TelerikCSS/kendo.default.min.css" rel="stylesheet">
<link href="~/GeneralJscripts/TelerikCSS/kendo.default.mobile.min.css" rel="stylesheet">

<script type="text/javascript">

	var selectedDate;
	var selectedLeadAuthor;
	var selectedCoAuthor;
	var filteredCoAuthList;

    $(document).ready(function () {		

        $("#productname").kendoDropDownList({
            optionLabel: "Select Product",
            dataTextField: "product_description",
            dataValueField: "product_id",
            dataSource: {
                transport: {
                    read: {
                        url: '@Url.Action("GetAllProductList", "Product")',
                        type: 'post',
                        dataType: 'json'
                    }
                }
            }
        });

		var dataSource = new kendo.data.DataSource({
			pageSize: 20,
			autoSync: true,
			schema: {
				model: {
					id: "ProductID",
					fields: {
						DocumentType: { defaultValue: { document_code: "Select Doc type", document_name: "Select Doc type" } },
						MainAuthor: {
							defaultValue: { user_name: "Select main Author", user_id: 0 },
						},
						CoAuthor: {
							defaultValue: { user_name: "Select CoAuthor", user_id: 0 }							
						},
                        Complexity: { defaultValue: { document_complexity_id: "Select Complexity", complexity_description: "Select Complexity" }},
						ReviewPeriodFrom: {
							type: "date", format: "dd-MMM-yyyy", validation: {
								required: true,								
							}							
						},
						ReviewPeriodTo: {
							type: "date", format: "dd-MMM-yyyy", validation: {
								required: true,								
							}							
						}
                    }
                }
            }       
        });

        $("#grid").kendoGrid({
            dataSource: dataSource,
            pageable: true,
			toolbar: [{ name: "create", text: "Add New Document" }],			
            columns: [
                { field: "DocumentType", title: "Document Name", width: "180px", editor: categoryDropDownEditor, template: "#=DocumentType.document_name#" },
                { field: "MainAuthor", title: "Main Author", width: "180px", editor: categoryDropDownEditor1, template: "#=MainAuthor.user_name#" },
                { field: "CoAuthor", title: "Co Author", editor: coAuthorCategory, template: "#=CoAuthor.user_name#" },
				{ field: "Complexity", title: "Complexity", editor: complexityCategory, template: "#=Complexity.complexity_description#" },
				{ field: "ReviewPeriodFrom", title: "Review From", editor: startDateEditor ,format: "{0:dd-MMM-yyyy}", width: "130px" },
				{
					field: "ReviewPeriodTo", title: "Review To", editor: endDateEditor ,format: "{0:dd-MMM-yyyy}", width: "130px"
				},
                { command: "destroy", title: "", width: "150px" }],
             editable: {
                createAt: "top"
            },
        });
    });

    function categoryDropDownEditor(container, options) {
        $('<input name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "document_code",
                dataValueField: "document_name",
                dataSource: {
                    transport: {
                        read: {
                            url: '@Url.Action("GetAllDocType", "Product")',
							type: 'post',
							dataType: 'json'
						}
					}
				}
			});
	}


	 function coAuthorCategory(container, options) {
        $('<input id="coAuthorData" name="' + options.field + '"/>')
            .appendTo(container)
			.kendoDropDownList({
				optionLabel: "Select CoAuthor",
				dataTextField: "user_name",
				dataValueField: "user_id",
				dataSource: filteredCoAuthList, 								
            });
	};

    function categoryDropDownEditor1(container, options) {
        $('<input name="' + options.field + '"/>')
            .appendTo(container)
			.kendoDropDownList({
				optionLabel: "Select LeadAuthor",
				dataTextField: "user_name",
				dataValueField: "user_id",
				dataSource: {
					transport: {
						read: {
							url: '@Url.Action("GetUsersForLeadAuthor", "Home")',
							type: 'post',
							dataType: 'json',							
						}
					}
				},
				select: function (e) {
					selectedLeadAuthor = e.dataItem.user_name;
					$.ajax({
						url: '@Url.Action("GetFilteredCoAuthors", "Home")',
						type: 'post',
						dataType: 'json',
						data: {
							selectedItem: selectedLeadAuthor
						},
						success: function (res) {							
							filteredCoAuthList = res;							
						},
						error: function (err) {
                            swal(err);
                            alert("Hi");
						}
					});
				}
            });
	};

	function startDateEditor(container, options) {
		$('<input onkeydown="return false;" id="start-date" name="' + options.field + '"/>')
			.appendTo(container)
			.kendoDatePicker({
				change: function () {
					var value = this.value();
					selectedDate = value;					
				}
			});
	}	

    function endDateEditor(container, options) {
        var minimumDate = kendo.parseDate(selectedDate);
        var updatedDate = kendo.date.addDays(minimumDate, 1);
        $('<input onkeydown="return false;" name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDatePicker({
                value: selectedDate,
                min: updatedDate
            });
    }

     function complexityCategory(container, options) {
        $('<input name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                optionLabel: "Select Complexity",
                dataTextField: "complexity_description",
                dataValueField: "document_complexity_id",
                dataSource: {
                    transport: {
                        read: {
                            url: '@Url.Action("GetAllComplexity", "Product")',
                            type: 'post',
                            dataType: 'json'
                        }
                    }
                }
            });
	};

    function submitrecord() {
        var protext = $("#productname").data("kendoDropDownList").text();
        if (protext == null || protext == "Select Product") {
            swal("Please select Product.");
            return ;
		}

		var docatten = $("#grid").data("kendoGrid").dataSource.data();
		//console.log("grid-data: ", docatten);
		 if (docatten.length  < 1) {
            swal("Please Add New Document");
            return;
		}

		//console.log("selectedCoauthor: ", selectedCoAuthor);			

		for (var i = 0; i < docatten.length; i++) {
			//console.log("Doc:",docatten[i].DocumentType.document_name);
			if (docatten[i].DocumentType.document_name == "Select Doc type") {
				swal("Please Select Document Type");
				return;
			} else if (docatten[i].MainAuthor.user_name == "Select main Author") {
				swal("Please Select Main Author");
				return;
			} else if (docatten[i].Complexity.complexity_description == "Select Complexity") {
				swal("Please Select Complexity");
				return;
            }
            else if (Date.parse(docatten[i].ReviewPeriodTo) == Date.parse(docatten[i].ReviewPeriodFrom)) {
                swal("The Review from date and Review to date can't be same.");
                return;
            }
            else if (Date.parse(docatten[i].ReviewPeriodTo) <= Date.parse(docatten[i].ReviewPeriodFrom)) {
                swal("The Review To Date must be greater than the Review from date");
                return;
            }
            else if (docatten[i].MainAuthor.user_name == docatten[i].CoAuthor.user_name) {
				swal("Both MainAuthor and LeadAuthor can't be same.")
				return;
			}
		}

        //var json = JSON.stringify(docatten);
        ////swal(docatten.length);
        //if (docatten.length  < 1) {
        //    swal("Select document Type");
        //    return;
        //}
		$.ajax({
			url: '@Url.Action("InsertAdhocReport","Product")',
			type: 'POST',
			datatype: "application/json",
			data: { models: JSON.parse(JSON.stringify(docatten)), protext: protext },
			success: function (response) {
				if (response.responseText.includes("Inserted")) {
					swal(response.responseText);
					window.location = '@Url.Action("Manager", "Home")';
				}
				else {
					var err = JSON.parse(response.responseText);
					swal(err.error);
				}
             },
             error: function (err) {
                 swal(response.responseText);
                // console.log(err);
             }
        });

    }

</script>

<body>
    <h2>AddProduct</h2>


    <div>
        Product Name:- <input type="text" class="k-content" name="Product Name" placeholder="Product Name" id="productname">
        @*Product Description:- <input type="text" class="k-content" name="Product Desc" placeholder="Product Desc" id="productdesc">*@

        <span></span>
    </div>

    <br />

    <div id="grid"></div>
    <br />

    <button id="submitbyn" onclick="submitrecord();" class="k-content k-primary btn">Submit</button>

</body>