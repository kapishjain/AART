@model AARTWeb.Models.AdminModel
@{
    ViewBag.Title = "Admin";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}

@*<script src="~/GeneralJscripts/TelerikScripts/jquery.min.js"></script>*@
@*<script src="~/GeneralJscripts/TelerikScripts/jquery.min.js"></script>
<script src="~/GeneralJscripts/TelerikScripts/jszip.min.js"></script>
<script src="~/GeneralJscripts/TelerikScripts/kendo.all.min.js"></script>

<link href="~/GeneralJscripts/TelerikCSS/kendo.common.min.css" rel="stylesheet" />
<link href="~/GeneralJscripts/TelerikCSS/kendo.common.min.css" rel="stylesheet">
<link href="~/GeneralJscripts/TelerikCSS/kendo.rtl.min.css" rel="stylesheet">
<link href="~/GeneralJscripts/TelerikCSS/kendo.blueopal.min.css" rel="stylesheet">
<link href="~/GeneralJscripts/TelerikCSS/kendo.blueopal.mobile.min.css" rel="stylesheet">*@

<style type="text/css">

    .k-grid-edit-row .k-tooltip {
            max-width: 117px !important;
    }
</style>

<script>
	

	$(document).ready(function () {		

		//function customNameEditor(container, options) {
		//	$('<input required name="' + options.field + '" pattern="[^a-zA-Z]+" />')
  //                      .appendTo(container);
		//}

		//function isValidChar(e) {
		//	var match = e.key.match(/[a-zA-Z0-9]/);
		//	return match ? true : false;
		//}

        //function editNumber(container, options) {
        //    $('<input required minlength="10" maxlength="10" data-bind="value:' + options.field + '"/>')
        //        .appendTo(container)
        //        .kendoNumericTextBox({
        //            spinners: false,
        //            format: "#",
        //            decimals: 0,
        //        });
        //}

        function categoryDropDownEditor(container, options) {
            $('<input required name="' + options.field + '"/>')
                .appendTo(container)
				.kendoDropDownList({
					optionLabel: "Select Role",
                    dataTextField: "role_name",
                    dataValueField: "role_id",
                    dataSource: rolesDataSource,
                });
        }


      function editCheck(container, options) {
            if (options.model.status === true) {
                $('<input name="' + options.field + '" type="checkbox"/>')
                    .attr('checked', options.model.status === "true")
                    .appendTo(container);
            } else {
                $('<input name="' + options.field + '" type="checkbox"/>')
                    .appendTo(container);
            }
        }


        function editCheck1(container, options) {
            if (options.model.is_locked === "true") {
                $('<input type="checkbox" name="is_locked" class="active chkbx" checked />').appendTo(container)
            } else {
                 $('<input type="checkbox" name="is_locked" class="active chkbx" />').appendTo(container)
            }
        }


        function editCheck2(container, options) {
            $('<input name="' + options.field + '" type="checkbox"/>')
                .attr('checked', options.model.status === 'A')
                .appendTo(container);
        }

        var dataSource1 = new kendo.data.DataSource({
            schema: {
                data: "users",
                total: "users.length",
                model: {
                    id: "user_id",
                    fields: {
                        user_id : { type: "string", editable: false},
						user_name: {
							type: "string", validation: {
								required: true,
								usernamevalidation: function (input) {									
									
									if (input.is("[name=user_name]") && input.val().match(/[^a-zA-Z0-9]+$/)) {
										input.attr("data-usernamevalidation-msg", "special characters are not allowed");
										return false;																												
									}
									if (input.is("[name=user_name]") && input.val().length < 5) {
										input.attr("data-usernamevalidation-msg", "username must contain 5-15 characters");
										return false;																												
									}
									if (input.is("[name=user_name]") && input.val().length > 15) {
										input.attr("data-usernamevalidation-msg", "username must contain 5-15 characters");
										return false;																												
									}

									return true;
								}
							}
						},
						name: {
							type: "string", validation: {
								required: true,
								namevalidation: function (input) {
									if (input.is("[name=name]") && input.val().match(/[^a-zA-Z]+$/)) {
										input.attr("data-namevalidation-msg", "only alphabets are allowed");
										return false;																												
									}
									if (input.is("[name=name]") && input.val().length < 3) {
										input.attr("data-namevalidation-msg", "name must be in range of 3-32 characters");
										return false;
									}
									if (input.is("[name=name]") && input.val().length > 32) {
										input.attr("data-namevalidation-msg", "name must be in range of 3-32 characters");
										return false;
									}
									return true;
								}
							}
						},
                        status: {  type: "boolean", parse: function (item) { return (item == 'true' || item === true);}, validation: { required: true } },
						email_id: {
							type: "string", validation: {
								email: true, required: true,
								emailvalidation: function (input) {
									if (input.is("[name=email_id]") && input.val().length > 255) {
										input.attr("data-emailvalidation-msg", "email must be in range of 0-255 characters");
										return false;
									}
									return true;
								}
							}
						},
						phone_number: {
							type: "string", validation: {
								required: true,	
								phonevalidation: function (input) {	
									if (input.is("[name=phone_number]") && input.val().match(/[^0-9]+$/)) {
										input.attr("data-phonevalidation-msg", "Only numbers are allowed");
										return false;																												
									}
									if (input.is("[name=phone_number]") && input.val().length < 10) {
										input.attr("data-phonevalidation-msg", "number must of length 10");
										return false;
									}
									if (input.is("[name=phone_number]") && input.val().length > 10) {
										input.attr("data-phonevalidation-msg", "number must of length 10");
										return false;
									}
									return true;
								}
							}
						},
                        role_id: { defaultValue: {  role_name: "", role_id: "" }, validation: { required: true }  },
                        is_locked: { type: "boolean" }
                    }
                }
            },
            transport: {
                read: {
                    url: '@Url.Action("Admin", "Admin")',
                    type: 'post',
                    datatype: 'json',
                },
                create: {
                    url: '@Url.Action("Create", "Admin")',
                    type: 'post',
                    dataType: "json",
                    complete: function (e) {
						if (e.status == 200) {
                            console.log(e);
							alert(e.responseJSON);
							if (e.responseJSON != "Succesfully Inserted.") {
								var cg = $('#grid').data('kendoGrid');
								cg.editRow($("#grid tr:eq(1)"));
							}							
							//$('#grid').data('kendoGrid').dataSource.read();
							//$('#grid').data('kendoGrid').refresh();
							//reloadPage();
						} else {
							alert(e.responseJSON);
							$('#grid').data('kendoGrid').dataSource.read();
							$('#grid').data('kendoGrid').refresh();
							//alert("Error occured while creating.")
						}
                        
                    }
                },
                update: {
                    url: '@Url.Action("Update", "Admin")',
                    type: "post",
                    dataType: "json",
                    complete: function (e) {
                        if (e.status == 200) {
                            console.log(e);
							alert(e.responseJSON);
							$('#grid').data('kendoGrid').dataSource.read();
							$('#grid').data('kendoGrid').refresh();
							//reloadPage();
							// alert("Updated successfully");
                        } else {
							alert(e.responseJSON);
							$('#grid').data('kendoGrid').dataSource.read();
							$('#grid').data('kendoGrid').refresh();

							//  alert("Error occured while updating");
						}
						
                    }
                },
                parameterMap: function (options, operation) {
                    if (operation != "read") {
                        return { models: options };
                    }
                }
            },
            pageSize: 20
        });

		$("#grid").kendoGrid({
			dataSource: dataSource1,
			height: 550,
			sortable: true,
			pageable: true,
			toolbar: [{ name: "create", text: "Add New User" }],
			columns: [
				{ field: "user_name", title: "UserName", width: "120px" },
				{
					field: "name", title: "Name", width: "120px",
				},
				{
					field: "status", title: "Status",
					template: '#if(status) { # Active # } else { # InActive # } #',
					width: "120px", editor: editCheck
				},
				{ field: "email_id", title: "EmailID", width: "120px" },
				{
					field: "phone_number", title: "Phone Number", width: "120px"
				},
				{ field: "role_id", title: "Role", width: "180px", editor: categoryDropDownEditor, template: "#=role_id.role_name#" },
				{
					field: "is_locked", title: "Is Locked",
					template: '# if(is_locked) { # Locked # } else { # UnLocked # } #',
					width: "120px", editor: editCheck1
				},
				{ command: [{ name: "edit", text: { update: "Update User" } }], title: "&nbsp;", width: "250px" }],
			editable: "inline",
			edit: function (e) {
				if (e.model.isNew()) {

					var update = $(e.container).parent().find(".k-grid-update");
					$(update).html('<span class="k-icon k-i-update"></span>Add User');
				}
			},
			//dataBound: function (e) {
			//	var grid = $("#grid").data("kendoGrid");
			//	var columns = grid.options.columns;
			//	if (columns.length > 0) {
			//		for (var i = 0; i < columns.length; i++) {
			//			if (columns[i].field == "email_id") {
			//				mergeGridRows("grid", "Phone Number")
			//			}
			//		}
			//	}
			//}
        });

        var rolesDataSource = new kendo.data.DataSource({
            schema: {
                data: "roles",
                total: "roles.length",
                model: {
                    id: "role_id",
                    fields: {
                        role_id: { type: "number", editable: false },
						role_name: {
							type: "string", validation: {
								required: true,
								rolenamevalidation: function (input) {
									if (input.is("[name=role_name]") && input.val().match(/[^a-zA-Z0-9]+$/)) {
										input.attr("data-rolenamevalidation-msg", "special characters are not allowed");
										return false;																												
									}
									if (input.is("[name=role_name]") && input.val().length < 3) {
										input.attr("data-rolenamevalidation-msg", "rolename must be in range of 3-24 characters");
										return false;
									}
									if (input.is("[name=role_name]") && input.val().length > 24) {
										input.attr("data-rolenamevalidation-msg", "rolename must be in range of 3-24 characters");
										return false;
									}
									return true;
								}
							}
						},
						role_description: {
							type: "string", validation: {
								required: true,
								roledescvalidation: function (input) {
									if (input.is("[name=role_description]") && input.val().match(/[^a-zA-Z0-9]+$/)) {
										input.attr("data-roledescvalidation-msg", "special characters are not allowed");
										return false;																												
									}
									if (input.is("[name=role_description]") && input.val().length < 3) {
										input.attr("data-roledescvalidation-msg", "roledescription must be in range of 3-32 characters");
										return false;
									}
									if (input.is("[name=role_description]") && input.val().length > 32) {
										input.attr("data-roledescvalidation-msg", "roledescription must be in range of 3-32 characters");
										return false;
									}
									return true;
								}								
							}
						},
                        status: {
                            type: "string", validation: { required: true },
                        },
                    }
                }
            },
            transport: {
                create: {
                    url: '@Url.Action("CreateRole", "Admin")',
                    type: "post",
                    datatype: "json",
                    complete: function (e) {
                        if (e.status == 200) {
                            console.log(e.responseJSON);
                            alert(e.responseJSON.info);
                        } else {
                            alert(e.responseJSON.error);
						}
						$('#role-grid').data('kendoGrid').dataSource.read();
						$('#role-grid').data('kendoGrid').refresh();
						
                    }
                },
                 update: {
                    url: '@Url.Action("UpdateRole", "Admin")',
                    type: "post",
                    dataType: "json",
                    complete: function (e) {
                        if (e.status == 200) {
                           // alert(e.responseJSON.info);
                            alert("Role updated.");
                        } else {
                             alert("Error occuered while update role.");
                           // alert(e.responseJSON.error);
                        }
						reloadPage();
                    }
                },
                read: {
                    url: '@Url.Action("Admin", "Admin")',
                    type: 'post',
                    datatype: 'json',
                },
                parameterMap: function (options, operation) {
                    if (operation != "read") {
                        return { rModels: options };
                    }
                }
            },
            pageSize: 50,
        });

        $("#role-grid").kendoGrid({
            dataSource: rolesDataSource,
            sortable: true,
            pageable: true,
            height: 400,
            			toolbar: [{name: "create", text: "Add New Role"}],

            columns: [
                { field: "role_name", title: "Role Name", width: "120px" },
                { field: "role_description", title: "Role Description", width: "120px" },
                {
                    field: "status", title: "Status",
                    template: '<input type="checkbox"  #if(status === "A"){#= checked="checked" #}else{ }# disabled="true"/>',
                    width: "120px", editor: editCheck2,
                },
                { command: ["edit"], title: "&nbsp;", width: "250px" }],
            editable: "inline",
            	edit: function (e) {
				if (e.model.isNew()) {

					var update = $(e.container).parent().find(".k-grid-update");
					$(update).html('<span class="k-icon k-i-update"></span>Add Role');
				}
			}
        });

        function reloadPage() {
            window.location.reload();
		}

		function isValidChar(e) {
			var match = e.key.match(/[a-zA-Z0-9]/);
			return match ? true : false;
		}

    });

</script>

<div>

    <div >
        <div class="col-sm-12 col-md-12 ">
            @if (TempData["Status"] != null)
            {
                if ((bool)TempData["Status"] == false)
                {
                    <span class="text-danger">@TempData["Message"]</span>
                }
                if ((bool)TempData["Status"] == true)
                {
                    <span class="text-success">@TempData["Message"]</span>
                }
            }
        </div>

        <div class="col-sm-12 col-md-12 ">
            Current users
            <div id="grid"></div>
            @*<input type="button" value="Add new User" onclick="location.href='@Url.Action("AddUser", "User")'" />*@

        </div>

    </div>

    <br />

    <div >
        <div class="col-sm-12 col-md-12">
            @if (TempData["RoleStatus"] != null)
            {
                if ((bool)TempData["RoleStatus"] == false)
                {
                    <span class="text-danger">@TempData["RoleMessage"]</span>
                }
                if ((bool)TempData["RoleStatus"] == true)
                {
                    <span class="text-success">@TempData["RoleMessage"]</span>
                }
            }
        </div>
        <div class="col-sm-12 col-md-12 ">
            Current roles
            <div id="role-grid"></div>
            @*<input type="button" value="Add new role" onclick="location.href='@Url.Action("AddRole", "Role")'" />*@
        </div>
    </div>

</div>